const productLoopConstructor = require('./product-loop.js');
const { getVendorByName } = require('./vendorUtilsDatabase.js')

/* This module is the meat and potatoes of the conversion to X12 for an 850 Purchase Order. Using the order data provided by Shopify, we need to assign, at the very least,
    the minimum required information for the X12 document to be sent successfully. Additional values can be added, just be sure to follow the object structure generated by
    Orderful according to the document guidelines (this can be found under "Integration Assistance" in the Orderful UI). All values are stored as strings (including values
    one might expect to be integers like line item quantity) as this is the format Orderful expects.                                                                         */

const convertToX12 = async (orderData, vendor) => {
  // Fetch ISA ID from vendorData
  const vendorData = await getVendorByName(vendor);
  
  const mappedISAId = vendorData?.isaId ?? 'ODFLVENKY';
  const warehouseID = vendorData?.locationId ?? "";

  // Check that alternate Sender ISA is not needed
  const STORE_ISA = ((vendor) => {
    if (vendor.toUpperCase() === "GODINGER") {
      return process.env.ALT_STORE_ISA;
    } else {
      return process.env.STORE_ISA;
    }
  })(vendor);

  // Format Date into CCYYMMDD
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}${month}${day}`;
  };

  // Construct PO1 loop
  const PO1Loops = await Promise.all(orderData.line_items.map(async item => {
    return await productLoopConstructor(item);
  }));

  // Construct the final JSON
  const finalJson = {
    sender: { isaId: STORE_ISA },
    receiver: { isaId: mappedISAId },
    type: { name: "850_PURCHASE_ORDER" },
    stream: vendorData.stream,
    message: {
      transactionSets: [{
        transactionSetHeader: [{ transactionSetIdentifierCode: "850" }],
        beginningSegmentForPurchaseOrder: [{
          transactionSetPurposeCode: "00",
          purchaseOrderTypeCode: "DS",
          purchaseOrderNumber: orderData.id.toString(),
          releaseNumber: orderData.name.toString(),
          date: formatDate(orderData.created_at),
        }],
        referenceInformation: [
          {
            referenceIdentificationQualifier: "IA",
            referenceIdentification: warehouseID,
          },
          {
            referenceIdentificationQualifier: "CO",
            referenceIdentification: orderData.id.toString(),
          },
        ],
        // Most values have a default blank string applied as Orderful cannot process undefined values
        currency: [{
          entityIdentifierCode: "BY",
          currencyCode: orderData.currency ? orderData.currency.toString() : "",
        }],
        N1_loop: [{
          partyIdentification: [{
            entityIdentifierCode: "ST",
            name: orderData.shipping_address.name ? orderData.shipping_address.name.toString() : "",
          }],
          partyLocation: [{
            addressInformation: orderData.shipping_address.address1 ? orderData.shipping_address.address1.toString() : "",
            addressInformation1: orderData.shipping_address.address2 ? orderData.shipping_address.address2.toString() : "",
          }],
          geographicLocation: [{
            /* In theory, none of these should be blank, but default values are given for edge cases where customers forget to input parts of their address.
               The idea is if Shopify accepted the address, the order should be sent regardless of if the address is complete or not.
               If you have vendors who charge for fixing addresses, you may want to exclude the defaut values, causing the order to error out and requiring manual intervention */

            cityName: orderData.shipping_address.city ? orderData.shipping_address.city.toString() : "",
            stateOrProvinceCode: orderData.shipping_address.province_code ? orderData.shipping_address.province_code.toString() : "",
            postalCode: orderData.shipping_address.zip ? orderData.shipping_address.zip.toString() : "",
            countryCode: orderData.shipping_address.country_code ? orderData.shipping_address.country_code.toString() : "",
          }],
        }],
        PO1_loop: PO1Loops,
        CTT_loop: [{
          transactionTotals: [{
            numberOfLineItems: orderData.line_items.length.toString(),
          }],
        }],
        transactionSetTrailer: [
            {
                "numberOfIncludedSegments":"",
                "transactionSetControlNumber": "",
            }
        ]
      }],
    },
  };
  return finalJson;

};

module.exports = convertToX12;